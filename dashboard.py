# -*- coding: utf-8 -*-
"""Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11UkrJf2OhMJVx6Vgt2RGr4BUYSpyYJ_5
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency
sns.set(style='dark')
"""## Menyiapkan DataFrame

### **create_df_monthly()** digunakan untuk menyiapkan `monthly_df`
"""

def create_df_monthly(day_df):
    # Buat kolom baru untuk Tahun-Bulan (format: YYYY-MM)
    day_df["year_month"] = day_df["dteday"].dt.strftime('%Y-%m')

    # Agregasi data per Tahun-Bulan
    df_monthly = day_df.groupby("year_month").agg({
        "cnt": "sum",          # Total jumlah penyewaan sepeda per bulan
        "casual": "sum",       # Total penyewaan oleh pengguna casual
        "registered": "sum"    # Total penyewaan oleh pengguna terdaftar
    }).reset_index()

    # Pastikan urutan waktu tetap sesuai
    df_monthly = df_monthly.sort_values("year_month")

    return df_monthly

"""### **create_grouped()** digunakan untuk menyiapkan dataframe `grouped`"""

def create_grouped(day_df):
    # Buat grouped DataFrame untuk agregasi jumlah penyewaan berdasarkan kategori hari
    grouped = day_df.groupby(["holiday", "weekday", "workingday"])["cnt"].mean().reset_index()

    # Ubah kategori menjadi string agar seaborn dapat membuat clustered bar chart dengan baik
    grouped["holiday"] = grouped["holiday"].map({0: "Non-Holiday", 1: "Holiday"})
    grouped["workingday"] = grouped["workingday"].map({0: "Non-Working Day", 1: "Working Day"})

    return grouped

all_df = pd.read_csv("all_data.csv")

# Pastikan kolom tanggal dalam format datetime
all_df["dteday"] = pd.to_datetime(all_df["dteday"])

"""## Membuat Komponen Filter"""

min_date = all_df["dteday"].min()
max_date = all_df["dteday"].max()

with st.sidebar:
    # Menambahkan logo perusahaan
    st.image("https://github.com/dicodingacademy/assets/raw/main/logo.png")

    # Mengambil start_date & end_date dari date_input
    start_date, end_date = st.date_input(
        label='Rentang Waktu',min_value=min_date,
        max_value=max_date,
        value=[min_date, max_date]
    )

main_df = all_df[(all_df["dteday"] >= str(start_date)) &
                (all_df["dteday"] <= str(end_date))]

main_df.head()

df_monthly = create_df_monthly(main_df)
grouped = create_grouped(main_df)

"""## Melengkapi Dashboard dengan Berbagai Visualisasi Data"""

st.header('Bike Rental Dashboard :sparkles:')

# Tampilan judul
st.subheader("Number of Total Users per Month")

# Membuat figure untuk visualisasi
fig, ax = plt.subplots(figsize=(10, 5))
ax.plot(
    df_monthly["year_month"],
    df_monthly["cnt"],
    marker='o',
    linewidth=2,
    color="#72BCD4"
)

ax.set_title("Number of Total Users per Month", loc="center", fontsize=20)
ax.tick_params(axis="x", labelsize=10, rotation=45)
ax.tick_params(axis="y", labelsize=10)

# Menampilkan plot di Streamlit
st.pyplot(fig)

# Menampilkan subheader di aplikasi Streamlit
st.subheader("Number of Casual Users per Month")

# Membuat figure dan axis untuk plot
fig, ax = plt.subplots(figsize=(10, 5))

# Plot data
ax.plot(
    df_monthly["year_month"],
    df_monthly["casual"],
    marker='o',
    linewidth=2,
    color="#72BCD4"
)

# Menambahkan judul dan mengatur tampilan sumbu
ax.set_title("Number of Casual Users per Month", loc="center", fontsize=20)
ax.tick_params(axis="x", labelsize=10, rotation=45)
ax.tick_params(axis="y", labelsize=10)

# Menampilkan plot di Streamlit
st.pyplot(fig)

# Menampilkan judul di dashboard
st.subheader("Number of Registered Users per Month")

# Membuat figure untuk visualisasi
fig, ax = plt.subplots(figsize=(10, 5))
ax.plot(
    df_monthly["year_month"],
    df_monthly["registered"],
    marker='o',
    linewidth=2,
    color="#72BCD4"
)
ax.set_title("Number of Registered Users per Month", loc="center", fontsize=20)
ax.tick_params(axis='x', labelsize=10, rotation=45)
ax.tick_params(axis='y', labelsize=10)

# Menampilkan plot di Streamlit
st.pyplot(fig)

# Menampilkan subjudul di dashboard
st.subheader("Impact of Holidays and Working Days on Bike Rentals")

# Membuat figure untuk visualisasi
fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(data=grouped, x="weekday", y="cnt", hue="holiday", ci=None, palette="Set2", ax=ax)

# Atur label
ax.set_xlabel("Weekday (0 = Sunday, ..., 6 = Saturday)")
ax.set_ylabel("Average Rental Count")
ax.set_title("Impact of Holidays and Working Days on Bike Rentals")

# Tambahkan legenda
ax.legend(title="Holiday Status")

# Menampilkan plot di Streamlit
st.pyplot(fig)
